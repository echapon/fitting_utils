#!/opt/star/bin/perl -w
#hi,
#I am the fit perl script. you can run me by doing perl fit.pl2
use strict;
use warnings;
use feature qw/say/;

#what I wanna do:
#create the directories like this:
my $workDir      = "/Users/nicolas/Project/ups2013/code2015";
# after $workdir, the structure is
# pdf(txt)Output/DATE/(pbpb,pp,pA,other)/pt_loose(tight)(/vProb)/Centrality(/pt)(/rapidity)/bin_X_Y/fitX.pdf(txt)(/fitres.root). bit complicated, but much simpler to get the syst variations from there!
#------------------------ OUTPUT DIRECTORIES per samples
my @sampleIndex  = ("","1","2","3","4","5","6","7","8","9"); #Input data sample. 1: pp@7TeV-d0 data ; 2: pp@7TeV-d3 data; 3: pp reco TT 4: pp reco GG, 5: pbpb zhen tree 6: PbPb@276 regit  GG 7: pp@2.76TeV data 8: MC, 9:pPb5tev first part of the run.
my $samstart = 6;
my $samend   = 6;
#starting point is here: picking the right dataset.
my @choseSamples = ("","pp7tev-d0", "pp7tev-d3","pbpbPPrecoTT", "pbpbPPrecoGG","pbpbZhen2011","pbpbRegit_cm","pp2p76tev","aaMC1S","pPb5tev");##pp2p76tev
# ------------------------------------------------------
#first, make the /output level (which will exist forever)
my $txtOutputDir=$workDir."/txtOutput";
my $pdfOutputDir=$workDir."/pdfOutput";
#then, make the /date level (which will always change, not very helpful but hey...)
my $todaysDate = "/04-2015";
my $pdfDateDir = $pdfOutputDir.$todaysDate;
my $txtDateDir = $txtOutputDir.$todaysDate;
if(! -e $txtDateDir){ system("mkdir $txtDateDir");}
if(! -e $pdfDateDir){ system("mkdir $pdfDateDir");}
#then, make the subdirectory of the data sample level
my @sampleDir =("/null","/pp7tev-d0", "/pp7tev-d3","/pbpbPPrecoTT", "/pbpbPPrecoGG","/pbpb2011reco","/PbPb","/pp","/MC","/pA");
my $outPdfSampleDir;
my $outTxtSampleDir;

my $ChooseFitParams = 0; #what you want 0: (1s, 2s, 3s) 1: (1s, 2s/1s; 3s/1s); 2: (1S, (2s+3s)/1s); 3:(1S, 2S/1S, 3S/1S, 3S/2S)
if($samstart == 8){$ChooseFitParams=0;}
my @ChooseWhat2Fit = ("yield_m8_14","ratio1","ratio23","ratio32");
my $outFilePrefix          = $ChooseWhat2Fit[$ChooseFitParams];

#then, the pt cut (can add vProb or other observables there in the same fashion)

my $ptMuStart1 = 2;#single muon pt > 4GeV/c cut, that no-one wants to change... that makes me sad.
my $ptMuEnd1 = 3;
my $ptMuStart2 = 2;
my $ptMuEnd2 = 3;
my @chooseptMu = ("","3","3.5","4","4.5");
my @outPdfPrefix_ptMu1 = ("/pt0","/pt_3","/pt_3p5","/pt_4","/pt_4p5");
my @outPdfPrefix_ptMu2 = ("_noPtCut","_3","_3p5","_4","_4p5");
my $ptMuPrefix;

my $outPdfPtDir ;
my $outTxtPtDir ;
#
##NOW, THE FIT PARAMETERS!

# chose if fix sigma1:
my @sigma1  = ("0","1"); # fix or not sigma1
my $sigstart = 0;
my $sigend   = 0;

my @useRef   = ("0","1","2"); # 0 free; 1:data-driven estimation, 2:MC study, 3:old subscript.
my $refstart  = 2;
my $refend    = 2;

my $modelstart =3;
my $modelend   =3;
#Background Model.  1: LS erf*exp + pol2; 2: LS RookeyPdf + pol2; 3: erf*exp; 4: pol2; 5: erf*exp+pol2 6: poly 3
my @bkgModel        = ("","1","2","3","4","5","6");
my $sigModelstart =4;
my $sigModelend   =4;
##### only for MC!!!!
#signal Model. 1: CB; 2:Gaus; 3:CB+Gaus; 4: CB+CB 5:Gaus+Gaus
my @sigModel        = ("","1","2","3","4","5");
if($samstart == 8){$sigModelstart=1; $sigModelend=1; $modelstart=4; $modelend=4;}
# chose FSR param
#0: free; 1: both fixed 2: alpha fixed 3: npow fixed 
#changing the landscape here...
# freeing parameters one by one, for fun (considering both widths as one )
#0: all free, 1: all fixed, 2: alpha, 3: npow, 4: width+s+sigmaFraction, 5: sigmaFraction and scale, 6: w+scale.
my @fsr     = ("0","1","2","3","4","5","6");
my $fsrstart = 1;
my $fsrend   = 1;
#
# fitting settings and plotting options.
#
my $paramsOnFigure = 1; #1: plot parameters;   0: plot CMS label
my $plotBkg        = 1; #0: hide LS or trkRot; 1: plot LS or trkRot data points and fit lines;
my $doTrkRot       = 0; #0: use LS;   1: use track rotation
my $doConstrainFit = 0; # 1: use constrain method
#
#some default cuts which can be overriden later in the code. (for example, this would change in pPb!)
#
my $muonEtaMin     = -2.4;
my $muonEtaMax     = 2.4; 

# my _dimuYMin       = -1.93; 
# my _dimuYMax       = 1.93;
my $upsPtCutMin    = 0;
my $upsPtCutMax    = 20;
#now, the OBSERVABLE (ooooh!)
#so, this gets a tiny bit more lengthy.
##subdirectory /bin names!
# the 
# my @binName = ("0.4","0.8");
# for(@binName) {say $_;
# 	       $_ =~ tr/./p/;
# 	       say $_;}
my $rapStart=0;
my $rapEnd=0;
my @rapBinMin = ("0.","0.4" ,"0.8","1.2","1.6","2.","0" ,"1.2.","0.");
my @rapBinMax = ("0.4","0.8","1.2","1.6","2.","2.4","1.2","2.4","2.4");
my @binNameStartRap = ("/Rap_0","/Rap_0p4" ,"/Rap_0p8","/Rap_1p2","/Rap_1p6","/Rap_2p0","/Rap_0" ,"/Rap_1p2","/Rap_0");
my @binNameEndRap = ("_0","_0p4" ,"_0p8","_1p2","_1p6","_2p0","_0" ,"_1p2","_0");
my $ptStart=0;
my $ptEnd=0;
my @upsPtBinMin = ("0","2.5","5","8" ,"12","20" ,"0"  ,"5","0","0");  
my @upsPtBinMax = ("2.5","5" , "8","12","20","40","5","12","20","50");
my @binNameStartPt= ("/Pt_0","/Pt_2p5","/Pt_5","/Pt_8" ,"/Pt_12","/Pt_20" ,"/Pt_0","/Pt_5","/Pt_0","/Pt_0");  
my @binNameEndPt=  ("_2p5","_5","_8","_12","_20","_40","_5","_12","_20","_50");
my $centstart=0;
my $centend=4;
my @centrality_min = ("0", "0","2","4", "8","12","16","20","28","20","0","4", "12","0","8"); 
my @centrality_max = ("40","2","4","8","12","16","20","28","40","40","4","12","20","8","40");
my @binNameStartCent = ("/Cent_0", "/Cent_0","/Cent_5","/Cent_10","/Cent_20","/Cent_30","/Cent_40","/Cent_50","/Cent_70","/Cent_50","/Cent_0","/Cent_10","/Cent_30","/Cent_0","/Cent_20"); 
my @binNameEndCent = ("_100","_5","_10","_20","_30","_40","_50","_70","_100","_100","_10","_30","_50","_20","_100");

my @binStart=($centstart,$ptStart,$rapStart);
my @binEnd=($centend,$ptEnd,$rapEnd);
my @ObsPrefix = ("/Centrality","/Pt","/Rap");
#from there, build the 3 directories.
my $outTxtFitsDir;
my $outPdfFitsDir;
my $DoRapNow=0;
my $DoPtNow=1;
for(my $isam=$samstart; $isam <=$samend ; $isam++){
    if($DoPtNow==1 && $DoRapNow==1){print"Times have changed, please check the code."; last;}
    $outPdfSampleDir = $pdfDateDir.$sampleDir[$isam];
    $outTxtSampleDir = $txtDateDir.$sampleDir[$isam];
    if(! -e $outPdfSampleDir){ system("mkdir $outPdfSampleDir");}
    if(! -e $outTxtSampleDir){ system("mkdir $outTxtSampleDir");}
    say $outPdfSampleDir;
    for (my $iPtMu1=$ptMuStart1; $iPtMu1<=$ptMuEnd1; $iPtMu1++)
    {
	my  $ptMuPrefix = $outPdfPrefix_ptMu1[$iPtMu1];
 	my $outPdfPtDir = $outPdfSampleDir.$ptMuPrefix;
	my $outTxtPtDir = $outTxtSampleDir.$ptMuPrefix;
	say $outPdfPtDir;
	for (my $iPtMu2=$ptMuStart2; $iPtMu2<=$ptMuEnd2; $iPtMu2++)
	{
	    if(($iPtMu2<$iPtMu1)){next;}
	    my  $ptMuPrefix2 = $outPdfPrefix_ptMu2[$iPtMu2];
	    my  $outPdfPtDir = $outPdfPtDir.$ptMuPrefix2;
	    my  $outTxtPtDir = $outTxtPtDir.$ptMuPrefix2;
	    say  $outPdfPtDir;
	    if(! -e $outPdfPtDir){ system("mkdir $outPdfPtDir");}
	    if(! -e $outTxtPtDir){ system("mkdir $outTxtPtDir");}
	    if($isam != 7 && ($DoPtNow==0 &&$DoRapNow == 0))
	    {	for($ObsPrefix[0])
		{
		    my  $outTxtObsDir = $outTxtPtDir.$_;
		    my  $outPdfObsDir = $outPdfPtDir.$_;
		    if(! -e $outPdfObsDir){ system("mkdir $outPdfObsDir");}
		    if(! -e $outTxtObsDir){ system("mkdir $outTxtObsDir");}
		    say $outTxtObsDir;
		    for($centstart..$centend){
			$outTxtFitsDir = $outTxtObsDir.$binNameStartCent[$_].$binNameEndCent[$_];
			$outPdfFitsDir = $outPdfObsDir.$binNameStartCent[$_].$binNameEndCent[$_];
			say $outTxtFitsDir;
			if(! -e $outPdfFitsDir){ system("mkdir $outPdfFitsDir");}
			if(! -e $outTxtFitsDir){ system("mkdir $outTxtFitsDir");}
		    }
		}
	    }
	    if($DoPtNow ==1)
	    {	for($ObsPrefix[1])
		{
		    my  $outTxtObsDir = $outTxtPtDir.$_;
		    my  $outPdfObsDir = $outPdfPtDir.$_;
		    if(! -e $outPdfObsDir){ system("mkdir $outPdfObsDir");}
		    if(! -e $outTxtObsDir){ system("mkdir $outTxtObsDir");}
		    say $outTxtObsDir;
		    for($ptStart..$ptEnd){
			$outTxtFitsDir = $outTxtObsDir.$binNameStartPt[$_].$binNameEndPt[$_];
			$outPdfFitsDir = $outPdfObsDir.$binNameStartPt[$_].$binNameEndPt[$_];
			say $outTxtFitsDir;
			if(! -e $outPdfFitsDir){ system("mkdir $outPdfFitsDir");}
			if(! -e $outTxtFitsDir){ system("mkdir $outTxtFitsDir");}
		    }
		}
	    }
	    if ($DoRapNow == 1)
	    {     for($ObsPrefix[2])
		  {
		      my  $outTxtObsDir = $outTxtPtDir.$_;
		      my  $outPdfObsDir = $outPdfPtDir.$_;
		      if(! -e $outPdfObsDir){ system("mkdir $outPdfObsDir");}
		      if(! -e $outTxtObsDir){ system("mkdir $outTxtObsDir");}
		      say $outTxtObsDir;
		      for($rapStart..$rapEnd){
			  $outTxtFitsDir = $outTxtObsDir.$binNameStartRap[$_].$binNameEndRap[$_];
			  $outPdfFitsDir = $outPdfObsDir.$binNameStartRap[$_].$binNameEndRap[$_];
			  say $outTxtFitsDir;
			  if(! -e $outPdfFitsDir){ system("mkdir $outPdfFitsDir");}
			  if(! -e $outTxtFitsDir){ system("mkdir $outTxtFitsDir");}
		      }
		  }
	    }
	}
    }
}

#####
#now, directories are all made. let's fit!
####
my $whatBin;
my $bkgModel;
for(my $isam=$samstart; $isam <=$samend ; $isam++){
    if($DoPtNow==1 && $DoRapNow==1){print"\n arf! \n"; last;}
    for($modelstart..$modelend){  #which usually is just modelstart = 3
	$bkgModel=$_;
	if($modelstart!=3){ $fsrstart=1, $fsrend=1;}
	$outPdfSampleDir = $pdfDateDir.$sampleDir[$isam];
	$outTxtSampleDir = $txtDateDir.$sampleDir[$isam];
	for (my $iPtMu1=$ptMuStart1; $iPtMu1<=$ptMuEnd1; $iPtMu1++)
	{
	    my  $ptMuPrefix = $outPdfPrefix_ptMu1[$iPtMu1];
	    $outPdfPtDir = $outPdfSampleDir.$ptMuPrefix;
	    $outTxtPtDir = $outTxtSampleDir.$ptMuPrefix;
	    for (my $iPtMu2=$ptMuStart2; $iPtMu2<=$ptMuEnd2; $iPtMu2++)
	    {
		if(($iPtMu2<$iPtMu1)){next;}
		my  $ptMuPrefix2 = $outPdfPrefix_ptMu2[$iPtMu2];
		my  $outPdfPtDir = $outPdfPtDir.$ptMuPrefix2;
		my  $outTxtPtDir = $outTxtPtDir.$ptMuPrefix2;
		if($isam != 7 && ($DoPtNow==0 &&$DoRapNow == 0))
		{	for($ObsPrefix[0])
			{
			    my $abs_dimuYMin       = 0.0;  
			    my $abs_dimuYMax       = 2.4; 
			    my  $upsPtCutMin=0.0;
			    my  $upsPtCutMax=40.0;
			    my  $outTxtObsDir = $outTxtPtDir.$_;
			    my  $outPdfObsDir = $outPdfPtDir.$_;
			    for($centstart..$centend){
				$whatBin = $_;
				$outTxtFitsDir = $outTxtObsDir.$binNameStartCent[$_].$binNameEndCent[$_];
				$outPdfFitsDir = $outPdfObsDir.$binNameStartCent[$_].$binNameEndCent[$_];
				for($fsr[$fsrstart]..$fsr[$fsrend]){
				    say $_;
			}
			    }
			}
		}
		if($DoPtNow ==1)
		{	for($ObsPrefix[1])
			{
			    my  $outTxtObsDir = $outTxtPtDir.$_;
			    my  $outPdfObsDir = $outPdfPtDir.$_;
			    my $abs_dimuYMin       = 0.0; 
			    my $abs_dimuYMax       = 2.4; 
			    for($ptStart..$ptEnd){
				$whatBin = $_;
				#	say $_;
				$outTxtFitsDir = $outTxtObsDir.$binNameStartPt[$_].$binNameEndPt[$_];
				$outPdfFitsDir = $outPdfObsDir.$binNameStartPt[$_].$binNameEndPt[$_];
				for($fsr[$fsrstart]..$fsr[$fsrend]){
				    print"Cent: $centrality_min[0] - $centrality_max[0] \n BkgModel: $bkgModel \n Muon cut:	$muonEtaMin - $muonEtaMax\n";
				    print"Save dir is: $outPdfFitsDir\n";
				    print "fsr:$_ \n reference: $refstart\n";
				    print " Sample is: $isam\n";
				    # print  "vProb is: $vProb\n";
				    print   "single Muon 1 pT > $chooseptMu[$iPtMu1]\n";
				    print   "single Muon 2 pT > $chooseptMu[$iPtMu2]\n";
				    print    " $upsPtBinMin[$whatBin] < pT_Ups < $upsPtBinMax[$whatBin] \n";
				    print    " $abs_dimuYMin < |y_Ups| < $abs_dimuYMax \n";
#				    say $chooseptMu[$iPtMu2];
				  #  system("root -l -b -q   'fitUpsilonYields.C($isam,$bkgModel,$_,$refstart,$whatBin,$DoRapNow,$DoPtNow,$chooseptMu[$iPtMu1],$chooseptMu[$iPtMu2], $muonEtaMin, $muonEtaMax,$abs_dimuYMin,$abs_dimuYMax,$upsPtBinMin[$whatBin],$upsPtBinMax[$whatBin], $centrality_min[0], $centrality_max[0],$sigModel[$sigModelstart],\"$outTxtFitsDir\",\"$outPdfFitsDir\",\"$choseSamples[$isam]\",\"$outFilePrefix\",$ChooseFitParams)' "); 
				}
			    }
			}
		}
		if ($DoRapNow == 1)
		{     for($ObsPrefix[2])
		      {
			  # things get interesting here, cause the variable is in fact abs(y), not y.
			  my  $outTxtObsDir = $outTxtPtDir.$_;
			  my  $outPdfObsDir = $outPdfPtDir.$_;
			  my  $upsPtCutMin  = 0.0;
			  my  $upsPtCutMax  = 40.0;
			  for($rapStart..$rapEnd){
			      $whatBin = $_;
			      $outTxtFitsDir = $outTxtObsDir.$binNameStartRap[$_].$binNameEndRap[$_];
			      $outPdfFitsDir = $outPdfObsDir.$binNameStartRap[$_].$binNameEndRap[$_];
			      for($fsr[$fsrstart]..$fsr[$fsrend]){
				  # say $_;
				  print"Cent: $centrality_min[0] - $centrality_max[0] \n BkgModel: $bkgModel \n Muon cut:	$muonEtaMin - $muonEtaMax\n";
				  print"Save dir is: $outPdfFitsDir\n";
				  print "fsr:$_ \n reference: $refstart\n";
				  print " Sample is: $isam\n";
				  # print  "vProb is: $vProb\n";
				  print   "single Muon 1 pT > $chooseptMu[$iPtMu1]\n";
				  print   "single Muon 2 pT > $chooseptMu[$iPtMu2]\n";
				  print    " $upsPtCutMin < pT_Ups < $upsPtCutMax \n";
				  print    " $rapBinMin[$whatBin] < |y_Ups| < rapBinMax[$whatBin] \n";
				  system("root -l -b -q   'fitUpsilonYields.C($isam,$bkgModel,$_,$refstart,$whatBin,$DoRapNow,$DoPtNow,$chooseptMu[$iPtMu1],$chooseptMu[$iPtMu2], $muonEtaMin, $muonEtaMax,$rapBinMin[$whatBin],$rapBinMax[$whatBin],$upsPtCutMin,$upsPtCutMax ,$centrality_min[0], $centrality_max[0],$sigModel[$sigModelstart],\"$outTxtFitsDir\",\"$outPdfFitsDir\",\"$choseSamples[$isam]\",\"$outFilePrefix\",$ChooseFitParams)' "); 
#cautionary
			      }
			  }
		      }
		}
	    }
	}
    }
}    
# #my $Obs= ("0","1","2");


# # my $ObsStart=0;
# # my $ObsEnd=2;
# # my $PdfBinName = .$ObsPrefix."_".;
# # my $txtbinName =  .$ObsPrefix."_".;
# #   my  $outPdfPtDir = $outPdfSampleDir.$ptMuPrefix;
# #   my  $outTxtPtDir = $outTxtSampleDir.$ptMuPrefix;
    
# # #     if(! -e $outPdfPtDir){ system("mkdir $outPdfPtDir");}
# # #     if(! -e $outTxtPtDir){ system("mkdir $outTxtPtDir");}
# # for(my $iObs=$ObsStart;$iObs<=$ObsEnd;$iObs++){
# #     for(my $ibin=$binStart[$iObs];$ibin<$binEnd[$iObs];$ibin++){

# #     }
# # }

# print "Welcome to SuperFitter! ";
# ###
# ###
